# this one is important
SET(CMAKE_SYSTEM_NAME Linux)
#this one not so much
SET(CMAKE_SYSTEM_VERSION 1)
# Set the system processor (aka target architecture)
SET( CMAKE_SYSTEM_PROCESSOR arm )
SET(CMAKE_SYSROOT /prj/atlanticus/releases/8009/LE.UM.0.0_040617_robot/cross-compile-toolchain/apq8009-robot  )
# specify the cross compiler
SET( CMAKE_C_COMPILER /prj/atlanticus/releases/8009/LE.UM.0.0_040617_robot/cross-compile-toolchain/x86_64-linux/usr/bin/arm-oe-linux-gnueabi/arm-oe-linux-gnueabi-gcc)

SET( CMAKE_CXX_COMPILER /prj/atlanticus/releases/8009/LE.UM.0.0_040617_robot/cross-compile-toolchain/x86_64-linux/usr/bin/arm-oe-linux-gnueabi/arm-oe-linux-gnueabi-g++)

set(CMAKE_CXX_FLAGS           ""                    CACHE STRING "c++ flags")
set(CMAKE_C_FLAGS             ""                    CACHE STRING "c flags")
set(CMAKE_SHARED_LINKER_FLAGS ""                    CACHE STRING "shared linker flags")
set(CMAKE_MODULE_LINKER_FLAGS ""                    CACHE STRING "module linker flags")


SET( COMMON_COMPILER_FLAGS 
"-include limits.h \
-Wall -Wextra -Wno-unused-function -Wno-unused-local-typedefs -Wno-psabi \
-D__LINUX__ -DSENSORFUSION_CL_EXPORT -DCAKE_ENABLE_SIDELOADING -DNoProfiler \
-DNDEBUG \
-marm -mfloat-abi=softfp -mfpu=neon \
-mthumb -O3 --sysroot=${CMAKE_SYSROOT} \
-fsigned-char -ffunction-sections -fdata-sections -fno-merge-constants \
-Wa,--noexecstack -Wl,--exclude-libs,ALL -Wl,--gc-sections \
-DISA_8x74_v7a \
" )

SET( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${COMMON_COMPILER_FLAGS}" )
SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 ${COMMON_COMPILER_FLAGS}" )


MESSAGE( STATUS "CXX_FLAGS: ${CMAKE_CXX_FLAGS}" )
MESSAGE( STATUS "TOOLCHAIN_ROOT ${TOOLCHAIN_ROOT} ")
MESSAGE( STATUS "CMAKE_SYSROOT ${CMAKE_SYSROOT} ")

# where is the target environment 
SET(
  CMAKE_FIND_ROOT_PATH  
  ${CMAKE_SYSROOT}/usr
  ${CMAKE_SYSROOT}/lib/arm-linux-gnueabihf 
  ${CMAKE_SYSROOT}/usr/lib 
  ${CMAKE_SYSROOT}/usr/lib/arm-linux-gnueabihf 
)

SET ( TARGET_ARCH "armv7")

# search for programs in the build host directories
SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)

# for libraries and headers in the target directories
SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

project (hello-cmake)
set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
add_executable(hello-cmake helloworld.cpp)

